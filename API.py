from flask import Flask, jsonify, request, render_template
import mysql.connector
from mysql.connector import Error
import json
import requests
from datetime import datetime, timedelta
import time

app = Flask(__name__)

DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': '1234',
    'database': 'securin1'
}

NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
def get_db_connection():
    return mysql.connector.connect(**DB_CONFIG)

def create_database():
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS cves_json (
            id VARCHAR(50) PRIMARY KEY,
            data JSON,
            published DATETIME,
            lastModified DATETIME
        )
        ''')
        conn.commit()
    except Error as e:
        print(f"Error creating database: {e}")
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()

def insert_cve(cve):
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cve_id = cve['id']
        published = datetime.strptime(cve['published'], '%Y-%m-%dT%H:%M:%S.%f')
        last_modified = datetime.strptime(cve['lastModified'], '%Y-%m-%dT%H:%M:%S.%f')
        cve_json = json.dumps(cve)
        
        cursor.execute('''
        INSERT INTO cves_json (id, data, published, lastModified)
        VALUES (%s, %s, %s, %s)
        ON DUPLICATE KEY UPDATE
        data = VALUES(data),
        published = VALUES(published),
        lastModified = VALUES(lastModified)
        ''', (cve_id, cve_json, published, last_modified))
        conn.commit()
    except Error as e:
        print(f"Error inserting CVE: {e}")
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()

def fetch_all_pages():
    params = {'resultsPerPage': 2000}
    start_index = 180000 #0 0 < None
    total_results = None
    
    while total_results is None or start_index < total_results:
        params['startIndex'] = start_index # paginating
        try:
            response = requests.get(NVD_API_URL, params=params)
            response.raise_for_status()
            data = response.json() 
            
            for vuln in data.get('vulnerabilities', []):
                insert_cve(vuln['cve'])
            
            total_results = data['totalResults']
            start_index += data['resultsPerPage']# 0 # 2000
            print(f"Processed {start_index} of {total_results} CVEs")
            time.sleep(5)
        except requests.RequestException as e:
            print(f"Error fetching data: {e}")
            break

@app.route('/update_database')
def update_database():
    create_database()
    fetch_all_pages()
    return jsonify({'message': 'Database updated successfully.'})

@app.route('/search/<string:ID>', methods=['GET'])
def search_api(ID):
    conn = get_db_connection()
    try:
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT data FROM cves_json WHERE id = %s", (ID,))
        result = cursor.fetchone()
        
        if result:
            return jsonify(json.loads(result['data'])), 200
        else:
            return jsonify({"error": f"No results found for ID: {ID}"}), 404
    except Error as e:
        return jsonify({"error": f"An error occurred: {str(e)}"}), 500
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()

@app.route('/latest_modified_dates/<int:days>', methods=['GET'])
def get_latest_modified_dates(days):
    num_days = days  #10  
    today = datetime.now().strftime('%Y-%m-%d')
    start_date = datetime.now() - timedelta(days=num_days) #05-07-2024
    
    conn = get_db_connection()
    try:
        cursor = conn.cursor(dictionary=True)
        cursor.execute("""
            SELECT data FROM cves_json
            WHERE lastModified BETWEEN %s AND %s
            ORDER BY lastModified DESC
        """, (start_date, datetime.now()))
        results = cursor.fetchall()
        
        if results:
            return jsonify([json.loads(result['data']) for result in results]), 200
        else:
            return jsonify({"error": "No records found"}), 404
    except Error as e:
        return jsonify({"error": f"An error occurred: {str(e)}"}), 500
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()

@app.route('/delete/<string:ID>')
def delete(ID):
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM cves_json WHERE id = %s", (ID,))
        conn.commit()
        if cursor.rowcount > 0:
            return jsonify({"message": "Deleted successfully"}), 200
        else: 
            return jsonify({"error": f"No record found with ID: {ID}"}), 404
    except Error as e:
        return jsonify({"error": f"An error occurred: {str(e)}"}), 500
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()



if __name__ == "__main__":
    app.run(debug=True)
